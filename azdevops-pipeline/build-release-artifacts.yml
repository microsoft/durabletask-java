# Gradle
# Build your Java project and run tests with Gradle using a Gradle wrapper script.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger: none

pool:
  vmImage: ubuntu-latest

steps:
- checkout: self

- task: Gradle@3
  inputs:
    # Specifies the working directory to run the Gradle build. The task uses the repository root directory if the working directory is not specified.
    workingDirectory: ''
    # Specifies the gradlew wrapper's location within the repository that will be used for the build.
    gradleWrapperFile: 'gradlew'
    # Sets the GRADLE_OPTS environment variable, which is used to send command-line arguments to start the JVM. The xmx flag specifies the maximum memory available to the JVM.
    gradleOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '$(jdkVersion)'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: false
    tasks: clean assemble
  displayName: Assemble durabletask-client and durabletask-azure-functions

# the secring.gpg file is required to sign the artifacts, it's generated from GnuPG, and it's stored in the library of the durabletaskframework ADO
- task: DownloadSecureFile@1
  name: gpgSecretFile
  displayName: 'Download GPG secret file'
  inputs:
    secureFile: 'secring.gpg'

- task: Gradle@3
  inputs:
    workingDirectory: ''
    gradleWrapperFile: 'gradlew'
    gradleOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '$(jdkVersion)'
    jdkArchitectureOption: 'x64'
    tasks: publish
    options: '-Psigning.keyId=$(gpgSignKey) -Psigning.password=$(gpgSignPassword) -Psigning.secretKeyRingFile=$(gpgSecretFile.secureFilePath)'
  displayName: Publish durabletask-client and durabletask-azure-functions
    
- task: CopyFiles@2
  displayName: 'Copy publish file to Artifact Staging Directory'
  inputs:
    SourceFolder: repo/com/microsoft
    Contents: '**/*.*'
    TargetFolder: $(Build.ArtifactStagingDirectory)

- task: PublishPipelineArtifact@1
  name: PublishPipelineArtifact1
  displayName: 'Publish Artifact: Build Outputs'
  inputs:
    ArtifactName: BuildOutputs
    TargetPath: $(Build.ArtifactStagingDirectory)